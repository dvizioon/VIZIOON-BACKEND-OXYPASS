services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: oxypass-backend-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-oxypass_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"  # Externa:Interna
    networks:
      - oxypass-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-oxypass_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Aplicação OxyPass Backend
  oxypass-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oxypass-backend
    restart: unless-stopped
    environment:
      # Banco de dados - CORRIGIDO
      DB_HOST: postgres  # Nome do serviço, não localhost
      DB_PORT: 5432      # Porta INTERNA do container PostgreSQL
      DB_NAME: ${DB_NAME:-oxypass_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASS:-postgres}
      DB_DIALECT: ${DB_DIALECT:-postgres}
      DB_DEBUG: ${DB_DEBUG:-false}
      
      # JWT Secrets
      JWT_SECRET: ${JWT_SECRET:-change_this_secret_key_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change_this_refresh_secret_in_production}
      JWT_RESET_SECRET: ${JWT_RESET_SECRET:-change_this_reset_secret_in_production}
      
      # Servidor
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      HOST: ${HOST:-0.0.0.0}
      
      # URLs
      BACKEND_URL: ${BACKEND_URL:-http://localhost:${PORT:-3000}}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000,http://localhost:5173}
      RESET_PASSWORD_PATH: ${RESET_PASSWORD_PATH:-reset-password?token}
      
      # Documentação
      DOC_ACTIVE: ${DOC_ACTIVE:-true}
      DOC_VERSION: ${DOC_VERSION:-1.0.0}
      DOCUMENTATION_URL: ${DOCUMENTATION_URL:-/docs}
      NAME_SERVICE: ${NAME_SERVICE:-OxyPass}
      
      # Rate Limiting
      RATE_LIMIT_WHITELIST: ${RATE_LIMIT_WHITELIST:-127.0.0.1,::1}
      
      # Logs
      SAVE_LOGS: ${SAVE_LOGS:-true}
    
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    
    volumes:
      - logs_data:/app/logs
    
    networks:
      - oxypass-network
    
    depends_on:
      postgres:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    command: >
      sh -c "
        echo 'Aguardando banco de dados...' &&
        sleep 15 &&
        echo 'Executando migrações...' &&
        npm run db:migrate &&
        echo 'Executando seed...' &&
        npm run db:seed &&
        echo 'Iniciando aplicação...' &&
        npm start
      "

volumes:
  postgres_data:
    driver: local
  logs_data:
    driver: local

networks:
  oxypass-network:
    driver: bridge